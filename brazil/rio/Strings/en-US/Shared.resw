<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutTheDev.Text" xml:space="preserve">
    <value>Windows developer (C#, .Net, XAML and SQL Server), social media and web master. Work for myself. Read my social accounts and you gonna discover more who I am.</value>
  </data>
  <data name="DouaiDescription.Text" xml:space="preserve">
    <value>Combining regular and irregular verbs of our Portuguese language in all tenses (Present, Imperfect, Perfect Present, more-than-perfect past, future, future of this, the present conditional, imperfect subjunctive tense, future subjunctive, imperative , infinitive and gerund).</value>
  </data>
  <data name="DouaiTitle.Text" xml:space="preserve">
    <value>Conjugar</value>
  </data>
  <data name="DownloadIt.Content" xml:space="preserve">
    <value>Download this app</value>
  </data>
  <data name="FeedbackEmailContent" xml:space="preserve">
    <value>Hey, here is some of my thoughts on your app, and how can you improve it: </value>
  </data>
  <data name="FeedbackEmailTitle" xml:space="preserve">
    <value>Feedback about </value>
  </data>
  <data name="FollowTwitter.Content" xml:space="preserve">
    <value>Follow me on Twitter</value>
  </data>
  <data name="LasVegasDescription.Text" xml:space="preserve">
    <value>Those who never played such a game like this or have never heard that throw the first stone! The best game of truth and consequence that the Windows Store has seen so far, has several bottles according to the occasion (in family, in the square, between friends, drunk, with the bests , alone,in the classroom and among couples) , with questions and pre-defined challenges is fun in the right esste application!</value>
  </data>
  <data name="LasVegasTitle.Text" xml:space="preserve">
    <value>#TrueOrDare</value>
  </data>
  <data name="LyonDescription.Text" xml:space="preserve">
    <value>Calculate and converts easily minutes, turning in hours, days, or even years or seconds. Perfect app for those who like to do marathons series and need to know how many episodes you can watch up to your next appointment, or you going to the movies and you want to eat something later, but can not miss the bus schedule. Do not waste time counting!</value>
  </data>
  <data name="LyonTitle.Text" xml:space="preserve">
    <value>Time calculator</value>
  </data>
  <data name="MiameDescription.Text" xml:space="preserve">
    <value>A ser escrito</value>
  </data>
  <data name="MiameTitle.Text" xml:space="preserve">
    <value>M!xer</value>
  </data>
  <data name="NiceDescription.Text" xml:space="preserve">
    <value>Isn't rare occasions where we need to give away someone with this application is easy. Just add the track numbers to be drawn and it will do the work for you. Try it.</value>
  </data>
  <data name="NiceTitle.Text" xml:space="preserve">
    <value>Random 42</value>
  </data>
  <data name="OpenSite.Content" xml:space="preserve">
    <value>Go to my website</value>
  </data>
  <data name="PasadenaDescription.Text" xml:space="preserve">
    <value>A game can destroy as well as to strengthen friendships. Take stronger drink, or that is closer to you, and will play the famous 'I Never ever' , where every time you've done something shown on the screen you should drink a sip. The rule is simple, the game is known, then what are you waiting? Call your closest friends for a round of 'I never ever'.</value>
  </data>
  <data name="PasadenaTitle.Text" xml:space="preserve">
    <value>#NeverEver</value>
  </data>
  <data name="RatePopupCancelButton" xml:space="preserve">
    <value>No, thanks</value>
  </data>
  <data name="RatePopupRateButton" xml:space="preserve">
    <value>Rate 5 stars</value>
  </data>
  <data name="RatePopupTitle" xml:space="preserve">
    <value>Rate this app</value>
  </data>
  <data name="RatePupupContent" xml:space="preserve">
    <value>Your feedback help me improve this app. If you like it, please, rate with 5 star so, that way, I continue to create new functions and updates.</value>
  </data>
  <data name="RateThisApp.Content" xml:space="preserve">
    <value>Rate this app</value>
  </data>
  <data name="RioDescription.Text" xml:space="preserve">
    <value>Now you can know, right in your phone, where the Olympic torch is going to be in Brazil.</value>
  </data>
  <data name="RioTitle.Text" xml:space="preserve">
    <value>Tocha Olímpica</value>
  </data>
  <data name="SendAFeedback.Content" xml:space="preserve">
    <value>Send a feedback</value>
  </data>
  <data name="VersionApp" xml:space="preserve">
    <value>App version: </value>
  </data>
  <data name="VersionCore" xml:space="preserve">
    <value>Core version: </value>
  </data>
</root>